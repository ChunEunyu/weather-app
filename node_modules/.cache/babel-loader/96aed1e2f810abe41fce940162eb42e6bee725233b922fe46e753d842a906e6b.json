{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\noonaProject\\\\weather-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from 'react';\nimport WeatherButton from './Component/WeatherButton';\n\n// 1. 앱이 실행되자마자 현재 위치 기반의 날씨가 보인다. \n// 2. 날씨 정보에는 도시, 섭씨, 화씨, 날씨상태\n// 3. 5개의 버튼이 있다(1개는 현재 위치, 4개는 다른 도시)\n// 4. 도시 버튼을 클릭할 때마다 도시별 날씨가 나온다.\n// 5. 현재 위치 버튼을 누르면 다시 현재 위치 기반의 날씨가 나온다. \n// 6. 데이터를 들고 오는 동안 로딩 스피너가 돈다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      console.log(\"cur lo\", lat, lon);\n      getWeatherByCurrentLocation(lat, lon);\n    });\n  };\n  const getWeatherByCurrentLocation = async (lat, lon) => {\n    let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=aa5c7557dd301844a890c13fa6b00d3b`;\n    let response = await fetch(url); // url을 호출해서 데이터를 갖고 올 때까지 기다리고(비동기), response에 넣기\n    let data = await response.json(); // json 추출을 기다리고 data에 넣기\n    console.log(data);\n  };\n  useEffect(() => {\n    getCurrentLocation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(WeatherBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","useEffect","useState","WeatherButton","jsxDEV","_jsxDEV","App","_s","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","console","log","getWeatherByCurrentLocation","url","response","fetch","data","json","children","WeatherBox","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/noonaProject/weather-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from 'react';\nimport WeatherButton from './Component/WeatherButton';\n\n// 1. 앱이 실행되자마자 현재 위치 기반의 날씨가 보인다. \n// 2. 날씨 정보에는 도시, 섭씨, 화씨, 날씨상태\n// 3. 5개의 버튼이 있다(1개는 현재 위치, 4개는 다른 도시)\n// 4. 도시 버튼을 클릭할 때마다 도시별 날씨가 나온다.\n// 5. 현재 위치 버튼을 누르면 다시 현재 위치 기반의 날씨가 나온다. \n// 6. 데이터를 들고 오는 동안 로딩 스피너가 돈다.\n\nfunction App() {\n\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition((position)=>{\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      console.log(\"cur lo\", lat, lon);\n      getWeatherByCurrentLocation(lat, lon)\n    });\n  };\n\n  const getWeatherByCurrentLocation = async (lat, lon) => {\n    let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=aa5c7557dd301844a890c13fa6b00d3b`;\n    let response = await fetch(url); // url을 호출해서 데이터를 갖고 올 때까지 기다리고(비동기), response에 넣기\n    let data = await response.json(); // json 추출을 기다리고 data에 넣기\n    console.log(data);\n  };\n\n  useEffect(() => {\n    getCurrentLocation();\n  },[]);\n  \n  return (\n    <div>\n      <WeatherBox />\n      <WeatherButton />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,OAAO,sCAAsC;AAC7C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,aAAa,MAAM,2BAA2B;;AAErD;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC/BC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAG;MACnD,IAAIC,GAAG,GAAGD,QAAQ,CAACE,MAAM,CAACC,QAAQ;MAClC,IAAIC,GAAG,GAAGJ,QAAQ,CAACE,MAAM,CAACG,SAAS;MACnCC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEN,GAAG,EAAEG,GAAG,CAAC;MAC/BI,2BAA2B,CAACP,GAAG,EAAEG,GAAG,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC;EAED,MAAMI,2BAA2B,GAAG,MAAAA,CAAOP,GAAG,EAAEG,GAAG,KAAK;IACtD,IAAIK,GAAG,GAAI,uDAAsDR,GAAI,QAAOG,GAAI,yCAAwC;IACxH,IAAIM,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC,CAAC,CAAC;IACjC,IAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;IAClCP,OAAO,CAACC,GAAG,CAACK,IAAI,CAAC;EACnB,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACdO,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAC,EAAE,CAAC;EAEL,oBACEH,OAAA;IAAAqB,QAAA,gBACErB,OAAA,CAACsB,UAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACd1B,OAAA,CAACF,aAAa;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEV;AAACxB,EAAA,CA5BQD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AA8BZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}